import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:get/get.dart';
import 'package:netflix/application/home/home_bloc.dart';
import 'package:netflix/application/home/home_getx_controller.dart';
import 'package:netflix/core/constants.dart';
import 'package:netflix/presentation/Home/widgets/background_card.dart';
import 'package:netflix/presentation/Home/widgets/main_title_card.dart';
import 'package:netflix/presentation/Home/widgets/number_title_card.dart';
import 'package:scrollable_positioned_list/scrollable_positioned_list.dart';

class ScreenHome extends StatelessWidget {
  const ScreenHome({super.key});

  @override
  Widget build(BuildContext context) {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      BlocProvider.of<HomeBloc>(context).add(const HomeEvent.homeLatest());
    });
    SystemChrome.setSystemUIOverlayStyle(const SystemUiOverlayStyle(
      statusBarColor: Colors.transparent,
      statusBarIconBrightness: Brightness.light,
    ));
    final PaletteController paletteController = Get.put(PaletteController());
    return Scaffold(
      extendBodyBehindAppBar: true,
      body: BlocBuilder<HomeBloc, HomeState>(
        builder: (context, state) {
          // Cache frequently used values
          final List<String> releasedPastYear = state.homeLatestList
              .map((m) => '$imageAppendUrl${m.posterPath}')
              .toList();
          final List<String> trendingList = state.homeTrendingList
              .map((m) => '$imageAppendUrl${m.posterPath}')
              .toList();
          final List<String> tvShowList = state.homeTvShowList
              .map((m) => '$imageAppendUrl${m.posterPath}')
              .toList();
          final List<String> dramaList = state.homeDramaGenreList
              .map((m) => '$imageAppendUrl${m.posterPath}')
              .toList();

          return Stack(children: [
            Obx(() {
              final List<Color> sideColors = paletteController.sideColors;
              final Color startColor =
                  sideColors.isNotEmpty ? sideColors[0] : Colors.transparent;
              final Color endColor =
                  sideColors.length > 1 ? sideColors[1] : Colors.transparent;

              return Container(
                width: double.infinity,
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    begin: Alignment.topCenter,
                    end: Alignment.bottomCenter,
                    colors: [
                      startColor,
                      endColor,
                    ],
                  ),
                ),
              );
            }),
            ScrollablePositionedList.builder(
              itemCount:
                  5, // Adjust according to the number of items in the list
              itemBuilder: (context, index) {
                switch (index) {
                  case 0:
                    return const BackgroundCard();
                  case 1:
                    if (releasedPastYear.isNotEmpty) {
                      return MainTitleCard(
                        title: 'Released In Past Year',
                        posterMovieList: releasedPastYear,
                        isLoading: state.isLoading,
                      );
                    }
                    return Container();
                  case 2:
                    if (trendingList.isNotEmpty) {
                      return MainTitleCard(
                        title: 'Trending Now',
                        posterMovieList: trendingList,
                        isLoading: state.isLoading,
                      );
                    }
                    return Container();
                  case 3:
                    if (tvShowList.isNotEmpty) {
                      return NumberTitleCard(
                        posterList: tvShowList,
                        isLoading: state.isLoading,
                      );
                    }
                    return Container();
                  case 4:
                    if (dramaList.isNotEmpty) {
                      return MainTitleCard(
                        title: 'Tense Drama',
                        posterMovieList: dramaList,
                        isLoading: state.isLoading,
                      );
                    }
                    return Container();
                  default:
                    return Container();
                }
              },
            ),
          ]);
        },
      ),
    );
  }
}



import 'package:flutter/material.dart';
import 'package:netflix/presentation/Home/screen_home.dart';
import 'package:netflix/presentation/downloads/screen_downloads.dart';
import 'package:netflix/presentation/fast_laughs/screen_fast_laugh.dart';
import 'package:netflix/presentation/main_page/widgets/bottomnav.dart';
import 'package:netflix/presentation/new&hot/screen_new_and_hot.dart';
import 'package:netflix/presentation/search/screen_search.dart';

class ScreenMainPage extends StatelessWidget {
  ScreenMainPage({super.key});
  final pages = [
    const ScreenHome(),
    const ScreenNewAndHot(),
    const ScreenFastLaughs(),
    const ScreenSearch(),
    ScreenDownloads()
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        body: Stack(children: [
      ValueListenableBuilder(
        valueListenable: selectedIndexNotifier,
        builder: (BuildContext context, int index, Widget? child) {
          return pages[index];
        },
      ),
      const Positioned(
        left: 0,
        right: 0,
        bottom: 20, // Adjust to move it up or down as desired
        child: BottomNavigationWidget(),
      ),
    ]));
  }
}
import 'dart:ui'; // Required for BackdropFilter

import 'package:flutter/material.dart';

ValueNotifier<int> selectedIndexNotifier = ValueNotifier(0);

class BottomNavigationWidget extends StatelessWidget {
  const BottomNavigationWidget({super.key});

  @override
  Widget build(BuildContext context) {
    final Size size = MediaQuery.of(context).size;
    return ValueListenableBuilder<int>(
      valueListenable: selectedIndexNotifier,
      builder: (context, selectedIndex, child) {
        return Center(
          child: Container(
            height: size.height * 0.07,
            margin: const EdgeInsets.symmetric(horizontal: 5.0),
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(30.0),
            ),
            child: ClipRRect(
              borderRadius: BorderRadius.circular(30.0),
              child: BackdropFilter(
                filter: ImageFilter.blur(sigmaX: 10, sigmaY: 10),
                child: SizedBox(
                  width: size.width * 0.8,
                  height: size.height * 0.07,
                  child: BottomNavigationBar(
                    currentIndex: selectedIndex,
                    onTap: (value) {
                      selectedIndexNotifier.value = value;
                    },
                    backgroundColor: Colors.transparent,
                    selectedItemColor: Colors.white,
                    unselectedItemColor: Colors.grey,
                    showSelectedLabels: false,
                    showUnselectedLabels: false,
                    selectedIconTheme: const IconThemeData(color: Colors.white),
                    unselectedIconTheme:
                        const IconThemeData(color: Colors.grey),
                    items: const [
                      BottomNavigationBarItem(
                          backgroundColor: Colors.transparent,
                          icon: Icon(
                            Icons.home,
                            size: 20,
                          ),
                          label: "Home"),
                      BottomNavigationBarItem(
                          icon: Icon(
                            Icons.collections,
                            size: 20,
                          ),
                          label: "New & Hot,  size: 15,"),
                      BottomNavigationBarItem(
                        icon: Icon(
                          Icons.emoji_emotions,
                          size: 20,
                        ),
                        label: "Fast Laughs",
                      ),
                      BottomNavigationBarItem(
                          icon: Icon(
                            Icons.search,
                            size: 20,
                          ),
                          label: "Search"),
                      BottomNavigationBarItem(
                          icon: Icon(
                            Icons.download,
                            size: 20,
                          ),
                          label: "Downloads"),
                    ],
                  ),
                ),
              ),
            ),
          ),
        );
      },
    );
  }
}
