import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:get/get.dart';
import 'package:netflix/application/home/home_bloc.dart';
import 'package:netflix/application/home/home_getx_controller.dart';
import 'package:netflix/core/constants.dart';
import 'package:netflix/domain/home/models/home_model.dart';
import 'package:netflix/presentation/Home/widgets/custom_button_widget.dart';

class BackgroundCard extends StatelessWidget {
  const BackgroundCard({super.key});

  @override
  Widget build(BuildContext context) {
    final Size size = MediaQuery.of(context).size;

    // Ensure that PaletteController is registered with GetX
    final PaletteController paletteController = Get.put(PaletteController());

    // Move expensive operation outside build method
    WidgetsBinding.instance.addPostFrameCallback((_) {
      BlocProvider.of<HomeBloc>(context).add(const HomeEvent.homeBg());
    });

    return BlocBuilder<HomeBloc, HomeState>(
      builder: (context, state) {
        // Cache frequently used values
        final bool isLoading = state.isLoading;
        final List<HomeResultData> homeResultList = state.homeResultList;

        if (isLoading) {
          return const Center(
            child: CircularProgressIndicator(),
          );
        } else if (homeResultList.isNotEmpty) {
          final String imagePath =
              '$imageAppendUrl${homeResultList[0].posterPath}';
          // Generate palette
          paletteController.generatePalette(imagePath);

          return Column(
            children: [
              GetBuilder<PaletteController>(
                builder: (controller) {
                  final Color? vibrantColor = controller.vibrantColor.value;
                  return Container(
                    width: double.infinity,
                    height: size.height * 0.76,
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        begin: Alignment.topCenter,
                        end: Alignment.bottomCenter,
                        colors: [
                          vibrantColor ?? Colors.transparent,
                          vibrantColor ?? Colors.transparent,
                        ],
                      ),
                    ),
                    child: Padding(
                      padding: const EdgeInsets.only(top: 50),
                      child: Center(
                        child: Container(
                          width: size.width * 0.87,
                          height: size.height * 0.61,
                          decoration: BoxDecoration(
                            borderRadius: kRadius15,
                            image: DecorationImage(
                              image: NetworkImage(imagePath),
                              fit: BoxFit.cover,
                            ),
                            boxShadow: [
                              BoxShadow(
                                color: Colors.black.withOpacity(0.4),
                                spreadRadius: 5,
                                blurRadius: 7,
                                offset: const Offset(0, 3),
                              ),
                            ],
                          ),
                          child: Stack(
                            children: [
                              Positioned(
                                bottom: 0,
                                left: 0,
                                right: 0,
                                child: Container(
                                  height: size.height * 0.067,
                                  color: Colors.black.withOpacity(0.24),
                                ),
                              ),
                              const Positioned(
                                bottom: 5,
                                left: 0,
                                right: 0,
                                child: Row(
                                  mainAxisAlignment:
                                      MainAxisAlignment.spaceEvenly,
                                  children: [
                                    CustomButtonWidget(
                                      icon: Icons.add,
                                      label: 'My List',
                                    ),
                                    Playbutton(),
                                    CustomButtonWidget(
                                      icon: Icons.info,
                                      label: 'Info',
                                    ),
                                  ],
                                ),
                              )
                            ],
                          ),
                        ),
                      ),
                    ),
                  );
                },
              ),
            ],
          );
        }
        return Container();
      },
    );
  }
}
